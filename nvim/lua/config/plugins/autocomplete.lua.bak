-- 定义一个函数，用于判断光标前是否有单词
local has_words_before = function()
	local line, col = unpack(vim.api.nvim_win_get_cursor(0))
	return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

-- 定义一个函数，用于限制字符串长度
local limitStr = function(str)
	if #str > 25 then
		str = string.sub(str, 1, 22) .. "..."
	end
	return str
end

-- 创建一个新的 Lua 模块
local M = {}

-- 配置信息
M.config = {
	"hrsh7th/nvim-cmp", -- nvim-cmp 插件名称
	after = "SirVer/ultisnips", -- 在 ultisnips 之后加载
	dependencies = { -- 插件的依赖项
		"hrsh7th/cmp-buffer",
		"hrsh7th/cmp-path",
		"hrsh7th/cmp-nvim-lsp",
		"hrsh7th/cmp-nvim-lua",
		"hrsh7th/cmp-calc",
		-- "andersevenrud/cmp-tmux",
		{
			"onsails/lspkind.nvim", -- 提供代码提示的图标
			lazy = false,
			config = function() -- 配置该插件的初始化
				require("lspkind").init()
			end,
		},
		{
			"quangnguyen30192/cmp-nvim-ultisnips", -- 与 UltiSnips 集成
			config = function() -- 配置该插件的初始化
				require("cmp_nvim_ultisnips").setup({
					-- 设置 UltiSnips 的代码补全文件路径
					snippet = {
						expand = function(args)
							vim.fn["UltiSnips#Anon"](args.body)
						end,
						-- 设置 UltiSnips 的代码补全文件夹路径
						ultisnips_dir = "~/.config/nvim/snippets/",
					},
				})
			end,
		},
		-- "L3MON4D3/LuaSnip",
	},
}

-- 设置自动补全项的高亮样式
local setCompHL = function()
	local fgdark = "#2E3440"

	vim.api.nvim_set_hl(0, "CmpItemAbbrMatch", { fg = "#82AAFF", bg = "NONE", bold = true })
	vim.api.nvim_set_hl(0, "CmpItemAbbrMatchFuzzy", { fg = "#82AAFF", bg = "NONE", bold = true })
	vim.api.nvim_set_hl(0, "CmpItemAbbrDeprecated", { fg = "#7E8294", bg = "NONE", strikethrough = true })

	vim.api.nvim_set_hl(0, "CmpItemMenu", { fg = "#808080", bg = "NONE", italic = true })
	vim.api.nvim_set_hl(0, "CmpItemKindField", { fg = fgdark, bg = "#B5585F" })
	vim.api.nvim_set_hl(0, "CmpItemKindProperty", { fg = fgdark, bg = "#B5585F" })
	vim.api.nvim_set_hl(0, "CmpItemKindEvent", { fg = fgdark, bg = "#B5585F" })

	vim.api.nvim_set_hl(0, "CmpItemKindText", { fg = fgdark, bg = "#9FBD73" })
	vim.api.nvim_set_hl(0, "CmpItemKindEnum", { fg = fgdark, bg = "#9FBD73" })
	vim.api.nvim_set_hl(0, "CmpItemKindKeyword", { fg = fgdark, bg = "#9FBD73" })

	vim.api.nvim_set_hl(0, "CmpItemKindConstant", { fg = fgdark, bg = "#D4BB6C" })
	vim.api.nvim_set_hl(0, "CmpItemKindConstructor", { fg = fgdark, bg = "#D4BB6C" })
	vim.api.nvim_set_hl(0, "CmpItemKindReference", { fg = fgdark, bg = "#D4BB6C" })

	vim.api.nvim_set_hl(0, "CmpItemKindFunction", { fg = fgdark, bg = "#A377BF" })
	vim.api.nvim_set_hl(0, "CmpItemKindStruct", { fg = fgdark, bg = "#A377BF" })
	vim.api.nvim_set_hl(0, "CmpItemKindClass", { fg = fgdark, bg = "#A377BF" })
	vim.api.nvim_set_hl(0, "CmpItemKindModule", { fg = fgdark, bg = "#A377BF" })
	vim.api.nvim_set_hl(0, "CmpItemKindOperator", { fg = fgdark, bg = "#A377BF" })

	vim.api.nvim_set_hl(0, "CmpItemKindVariable", { fg = fgdark, bg = "#7E8294" })
	vim.api.nvim_set_hl(0, "CmpItemKindFile", { fg = fgdark, bg = "#7E8294" })

	vim.api.nvim_set_hl(0, "CmpItemKindUnit", { fg = fgdark, bg = "#D4A959" })
	vim.api.nvim_set_hl(0, "CmpItemKindSnippet", { fg = fgdark, bg = "#D4A959" })
	vim.api.nvim_set_hl(0, "CmpItemKindFolder", { fg = fgdark, bg = "#D4A959" })

	vim.api.nvim_set_hl(0, "CmpItemKindMethod", { fg = fgdark, bg = "#6C8ED4" })
	vim.api.nvim_set_hl(0, "CmpItemKindValue", { fg = fgdark, bg = "#6C8ED4" })
	vim.api.nvim_set_hl(0, "CmpItemKindEnumMember", { fg = fgdark, bg = "#6C8ED4" })

	vim.api.nvim_set_hl(0, "CmpItemKindInterface", { fg = fgdark, bg = "#58B5A8" })
	vim.api.nvim_set_hl(0, "CmpItemKindColor", { fg = fgdark, bg = "#58B5A8" })
	vim.api.nvim_set_hl(0, "CmpItemKindTypeParameter", { fg = fgdark, bg = "#58B5A8" })
end

-- 配置函数
M.configfunc = function()
	local lspkind = require("lspkind")

	-- 设置一些自定义的高亮样式
	setCompHL()
	vim.api.nvim_set_hl(0, "CmpItemKindCopilot", { fg = "#6CC644" })
	local cmp = require("cmp")
	local cmp_ultisnips_mappings = require("cmp_nvim_ultisnips.mappings")
	-- local luasnip = require("luasnip")

	-- 设置在命令行输入时使用缓冲区作为补全来源，对于 '/' 和 '?' 命令（如果你启用了 `native_menu`，这个设置将不再起作用）。
	cmp.setup.cmdline({ "/", "?" }, {
		mapping = cmp.mapping.preset.cmdline(), -- 使用默认的命令行映射
		sources = {
			{ name = "buffer" }, -- 使用缓冲区作为补全来源
		},
	})

	-- cmp 插件的设置
	cmp.setup({
		preselect = cmp.PreselectMode.None, -- 不自动预选
		snippet = { -- 设置代码片段扩展功能
			expand = function(args)
				-- 设置了 UltiSnips 的扩展函数，使得 nvim-cmp 能够使用 UltiSnips 的代码片段
				vim.fn["UltiSnips#Anon"](args.body) -- 使用 UltiSnips 进行代码片段扩展
			end,
		},
		window = { -- 设置弹出窗口的样式
			completion = {
				-- winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
				col_offset = 0,
				side_padding = 0,
			},
			documentation = cmp.config.window.bordered(), -- 使用边框显示文档信息
		},
		formatting = { -- 设置补全项的格式化
			--  "kind"（补全项的类型）、"abbr"（补全项的缩写）、"menu"（补全项的详情菜单）
			fields = { "kind", "abbr", "menu" },
			maxwidth = 20,
			maxheight = 10,
			format = function(entry, vim_item)
				local kind = lspkind.cmp_format({
					mode = "symbol_text",
					symbol_map = { Codeium = "" },
				})(entry, vim_item)
				local strings = vim.split(kind.kind, "%s", { trimempty = true })
				kind.kind = " " .. (strings[1] or "") .. " "
				kind.menu = limitStr(entry:get_completion_item().detail or "")

				return kind
			end,
		},
		sources = cmp.config.sources({ -- 设置补全来源
			{ name = "nvim_lsp" }, -- LSP 补全
			{ name = "buffer" }, -- 当前文件的单词补全
		}, {
			{ name = "path" }, -- 路径补全
			{ name = "nvim_lua" },
			{ name = "calc" },
			{ name = "ultisnips" },
			-- { name = "tmux", option = { all_panes = true } }, -- 这个比较慢，注释掉了
		}),
		mapping = cmp.mapping.preset.insert({ -- 设置键盘映射
			["<C-o>"] = cmp.mapping.complete(),
			["<c-e>"] = cmp.mapping(function()
				cmp_ultisnips_mappings.compose({ "expand", "jump_forwards" })(function() end)
			end, {
				"i",
				"s", --[[ "c" (to enable the mapping in command mode) ]]
			}),
			["<c-f>"] = cmp.mapping({
				i = function(fallback)
					cmp.close()
					fallback()
				end,
			}),
			["<c-y>"] = cmp.mapping({
				i = function(fallback)
					fallback()
				end,
			}),
			["<CR>"] = cmp.mapping({
				i = function(fallback)
					if cmp.visible() and cmp.get_active_entry() then
						cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = false })
					else
						fallback()
					end
				end,
			}),
			["<C-m>"] = cmp.mapping({
				i = function(fallback)
					if cmp.visible() and cmp.get_active_entry() then
						cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = false })
					else
						fallback()
					end
				end,
			}),
			["<Tab>"] = cmp.mapping(function(fallback)
				cmp_ultisnips_mappings.expand_or_jump_forwards(fallback)
			end, {
				"i",
				"s", --[[ "c" (to enable the mapping in command mode) ]]
			}),
			["<S-Tab>"] = cmp.mapping(function(fallback)
				cmp_ultisnips_mappings.jump_backwards(fallback)
			end, {
				"i",
				"s", --[[ "c" (to enable the mapping in command mode) ]]
			}),
			-- 下面配置是选择提示操作
			["<C-n>"] = cmp.mapping({
				i = function(fallback)
					if cmp.visible() then
						cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
					elseif has_words_before() then
						cmp.complete()
					else
						fallback()
					end
				end,
			}),
			["<C-p>"] = cmp.mapping({
				i = function(fallback)
					if cmp.visible() then
						cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
					else
						fallback()
					end
				end,
			}),
		}),
	})
end

return M -- 返回模块
