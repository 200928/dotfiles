# -- general 全局设置

# （可选）设置 tmux 默认路径为当前工作目录
# set-option default-path "$PWD"

# 设置状态栏位置为底部
set -g status-position bottom

# ----------------- 改善颜色显示 -----------------
# 设置默认终端为支持256色的模式（screen-256color）
set -g default-terminal screen-256color
# 启用真彩色支持，并为所有256色终端加上 truecolor 支持
set -ga terminal-overrides ",*256col*:Tc" 

# 以下几行为备用设置（被注释掉的配置），可根据需要启用
# set -g default-terminal "tmux-256color"
# # set -g default-terminal "${TERM}"
# set -ga terminal-overrides ",*256col*:Tc"

# ----------------- 模拟 Vim 操作 -----------------
# 将 tmux 的复制模式设为 vi 模式，使用 Vim 风格按键
setw -g mode-keys vi

# 定义一个判断当前 pane 是否运行 Vim/Neovim 等编辑器的命令
# 此命令检测当前 pane 的进程状态，如果匹配到 vim、nvim、gvim 等则返回真
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# 根据当前是否在 Vim 环境下进行按键绑定：
# 如果在 Vim 中则发送对应的方向键，否则进行 pane 切换
bind -n C-h  if-shell  "$is_vim"  "send-keys C-h"  "select-pane -L"
bind -n C-j  if-shell  "$is_vim"  "send-keys C-j"  "select-pane -D"
bind -n C-k  if-shell  "$is_vim"  "send-keys C-k"  "select-pane -U"
bind -n C-l  if-shell  "$is_vim"  "send-keys C-l"  "select-pane -R"

# 绑定 Ctrl+Space 切换布局
bind -n C-Space next-layout

# ----------------- 窗格操作快捷键 -----------------
# 绑定 > 和 < 用于交换当前窗格位置（向下或向上交换）
bind > swap-pane -D
bind < swap-pane -U

# 简化方向切换，直接使用 h/j/k/l 键进行 pane 切换
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# 以下两行与 pane selection（面板选择）存在冲突，因此被注释掉
# bind -r C-h select-window -t :-
# bind -r C-l select-window -t :+

# ----------------- 复制与粘贴模式 -----------------
# 绑定 m 进入复制模式
bind m copy-mode    
# 绑定 v 进行粘贴操作
bind v paste-buffer     
# 在复制模式下，绑定 v 开始文本选择（Vim风格选择）
bind -T copy-mode-vi v send -X begin-selection
# 在复制模式下，绑定 Ctrl+v 切换矩形选择模式
bind -T copy-mode-vi C-v send -X rectangle-toggle
# 以下命令（被注释）原先用来复制选择并退出复制模式
# bind -T copy-mode-vi "y" send -X copy-selection-and-cancel
# 使用 xclip 工具复制选中内容到系统剪贴板，同时退出复制模式
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# ----------------- 修改前缀键 -----------------
# 取消 tmux 默认的前缀键 C-b
unbind C-b
# 将前缀键修改为 C-a（类似 GNU screen 的风格）
set -g prefix C-a
# 以下几行为备用的前缀发送方式（均被注释掉）
# bind a send-prefix
# bind C-a send-prefix
# bind b send-prefix
# bind C-b send-prefix

# ----------------- 窗口与窗格创建 -----------------
# 在当前 pane 的目录下新建窗口
bind c new-window -c "#{pane_current_path}"
# 分割当前窗口为左右两个 pane
bind | split-window -h
# 分割当前窗口为上下两个 pane
bind - split-window -v

# ----------------- 关闭窗口与窗格 -----------------
# 取消 x 绑定（防止误操作）
unbind x
# 绑定大写 X 用于关闭当前 pane
bind X kill-pane
# 绑定大写 Q 用于关闭当前窗口（一个窗口可能存在多个pane）
bind Q kill-window
# 绑定大写 K 弹出确认对话框关闭窗口
bind K confirm kill-window

# ----------------- 面板输入控制（可选） -----------------
# 以下两行用于启用或禁用 pane 键盘输入，但目前与其他操作可能冲突，故暂时注释
# bind < select-pane -d \; display-message "input disabled"
# bind > select-pane -e \; display-message "input enabled"

# ----------------- 自动调整窗口大小 -----------------
# 根据当前 pane 客户端大小自动调整窗口尺寸
setw -g aggressive-resize on

# ----------------- 启用鼠标控制 -----------------
# 开启鼠标支持，可用鼠标点击选择 pane、窗口及滚动复制模式
set -g mouse on

# ----------------- 编号设置 -----------------
# 将窗口编号从 1 开始，便于与键盘数字顺序对应
set -g base-index 1
# 将 pane 编号从 1 开始
setw -g pane-base-index 1

# ----------------- 调整 pane 大小快捷键 -----------------
# 使用大写字母绑定以固定步长（5 个单位）调整 pane 大小
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# 绑定方向键与 Ctrl 组合，提供同样的 pane 调整功能
bind -n C-Left  "resize-pane -L 5"
bind -n C-Right "resize-pane -R 5"
bind -n C-Up    "resize-pane -U 5"
bind -n C-Down  "resize-pane -D 5"

# ----------------- 窗口切换快捷键 -----------------
# 以下两行用于切换到前/后一个窗口，但被注释，保留备用
# bind -r C-h previous-window # 切换到上一个窗口
# bind -r C-l next-window     # 切换到下一个窗口
# 绑定 Tab 键切换到上次使用的窗口
bind Tab last-window

# ----------------- 自动重命名窗口 -----------------
# 绑定 N 键启用当前窗口的自动重命名功能，并显示提示信息
bind N setw automatic-rename on \; display-message "automatic rename enabled"

# ----------------- 窗口重编号 -----------------
# 当关闭窗口后，自动重新按顺序编号剩余窗口
set -g renumber-windows on

# ----------------- 活动监控 -----------------
# 启用窗口活动监控，当非当前窗口有输出更新时，在状态栏上有提示
setw -g monitor-activity on

# ----------------- 其它优化设置 -----------------
# 设置 tmux 在等待 escape 序列时的时间为0（提高响应速度）
set -sg escape-time 0
# 显示 pane 编号的时间（单位为毫秒），方便 pane 选择
set -g display-panes-time 2000
# 增加滚动历史记录行数，防止过早丢失历史内容
set -g history-limit 65536

# 绑定 Ctrl+k 清除当前 pane 历史记录，并显示提示信息
bind C-k clear-history \; display-message "history cleared"

# ----------------- 窗格与窗口间的交互 -----------------
# 绑定 @ 键，弹出命令提示符，允许将其他窗口/会话中的 pane 加入到当前窗口中
bind @ command-prompt -p "create pane from:" "join-pane -s ':%%'"

# ----------------- 配置重载 -----------------
# 绑定 Ctrl+r 重新加载当前的 tmux 配置文件，并显示提示信息
bind r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded"

# ----------------- 前缀键透传切换 -----------------
# 绑定 P 键，用于切换前缀键的透传状态
# 如果当前前缀为 C-a，则切换为 C-b（启用透传），反之恢复为 C-a
bind P if-shell "[ \"$(tmux show-options -g prefix)\" = \"prefix C-a\" ]" '\
    set -g prefix C-b; display-message "passthrough enabled"; refresh-client -S; \
    ' '\
    set -g prefix C-a; display-message "passthrough disabled"; refresh-client -S; \
    '

# ----------------- pane 编号显示颜色 -----------------
# 设置活动 pane 的编号颜色为 colour166（可视为蓝色）
set -g display-panes-active-colour colour166 
# 设置其他 pane 的编号颜色为 colour33（可视为橙色）
set -g display-panes-colour colour33 

# ----------------- 时钟显示颜色 -----------------
# 设置 tmux 时钟模式的颜色为 colour64（绿色）
setw -g clock-mode-colour colour64 

# ----------------- 本地自定义配置 -----------------
# 如果存在 ~/.tmux_local.conf 文件，则加载该文件，实现本地定制
if-shell "[ -f ~/.tmux_local.conf ]" 'source ~/.tmux_local.conf'

# ----------------- Undercurl 支持 -----------------
# 以下两行用于设置下划线波浪线（undercurl）支持，需要 tmux 3.0 及以上版本
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # 启用 undercurl 效果
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # 设置下划线颜色


# ----------------- 状态栏主题设置 -----------------
# 设置窗口之间无分隔符
set -wg window-status-separator ""
# 设置状态栏刷新时间为1秒，保证信息实时更新
set -g status-interval 1
# 状态栏内容左对齐
set -g status-justify left 
# 在非当前窗口有活动时，在状态栏上显示通知
setw -g monitor-activity on 

# 设置窗口列表（状态栏左侧）的对齐方式为左对齐
set -g status-justify 'left'
# 设置状态栏左侧和右侧的最大字符长度
set -g status-left-length 300
set -g status-right-length 300

# ----------------- 加载插件 -----------------
set -g @plugin 'tmux-plugins/tpm'
# tmux优化和功能增强插件
set -g @plugin 'tmux-plugins/tmux-sensible'

# tmux保存会话依赖于tmux进程，因此关机重启后会话将被清空
# 目前有resurrect和continuum两个插件可以持久保存用户会话
# 无须任何配置就能够备份tmux会话中的各种细节，包括窗口、面板的顺序、布局、工作目录，运行程序等等数据
#   1. 保存的快捷键: <prefix + Ctrl-s>  tmux状态栏在保存开始
#   2. 恢复的快捷键: <prefix + Ctrl-r>  tmux状态栏在恢复开始
# 保存时，tmux会话的详细信息会以文本文件的格式保存到~/.tmux/resurrect目录，恢复时则从此处读取
# 由于数据文件是明文的，因此你完全可以自由管理或者编辑这些会话状态文件，如果备份频繁记得定期清除历史备份
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum' 
# 开启自动保存会话
set -g @continuum-restore 'on'
# 修改自动保存间隔，如果改成0则停止自动保存
set -g @continuum-save-interval '15'


# 其中copycat搜索插件支持正则表达式搜索/搜索结果高亮/预定义搜索
# 正则格式搜索: <prefix+/>
# 搜索结果高亮: 使用grep命令搜索且搜索不区分大小写
# 预定义的搜索:
#   1. 文件搜索    <prefix+ctrl-f>
#   2. URL搜索     <prefix+ctrl-u>
#   3. 数字搜索    <prefix+ctrl-d>
#   4. IP地址搜索  <prefix+alt-i>
# 当然可以使用n/N进行高亮选择进行一个个的跳转
set -g @plugin 'tmux-plugins/tmux-copycat'

# 文件目录树
# 切换到侧栏的目录树: <prefix+Tab>
# 光标移动到侧边栏上: <prefix+Backspace>
set -g @plugin 'tmux-plugins/tmux-sidebar'

# 在右侧状态栏中展示电池和CPU信息
# cpu extension plugin
set -g @plugin 'tmux-plugins/tmux-cpu'
# cell extension plugin
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @batt_remain_short 'true'
# show tmux prefix highlight
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @batt_icon_status_charged '🔋'
set -g @batt_icon_status_charging '⚡'
set -g @batt_icon_status_discharging '👎'
set -g @batt_color_status_primary_charged '#3daee9'
set -g @batt_color_status_primary_charging '#3daee9'

# set -g @plugin 'catppuccin/tmux#v2.1.2'
# set -g @catppuccin_flavor 'mocha'
# set -g @plugin 'dracula/tmux'
# 整体状态栏：背景纯黑，文字纯白
set -g status-style "bg=#000000,fg=#d4d4d4"

# 状态栏左侧：背景亮绿色，文字黑色，显示会话名称
set -g status-left "#[bg=#00FF00,fg=#000000] S: #S "

# 当前窗口状态：背景纯黑，文字亮黄色，并加粗显示，同时附加额外标记
set -wg window-status-current-format "#[bg=#6a5acd,fg=#FFFFFF,bold] #I:#W #F "
set -g status-right '#{prefix_highlight} | CPU:#{cpu_percentage} RAM:#{ram_percentage} #{battery_percentage} #{battery_remain}| %h-%d %H:%M:%S #{battery_icon_status}'

run "~/.tmux/plugins/tpm/tpm"
